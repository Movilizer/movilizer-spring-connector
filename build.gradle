/**
 * To run the application:
 * $ gradle bootRun
 *
 * TODO add maven profile functionality by calling a new variable to the call and evaluating
 * https://www.gradleware.com/tutorials/feature-spotlight-gradles-support-maven-pom-profiles/
 * http://www.coderanch.com/t/603665/tools/similar-Maven-profile-Gradle
 */

buildscript {
    ext {
        springBootVersion = '1.2.1.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("no.nils:wsdl2java:0.6")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.0.RELEASE")
    }
}

// Base plugin for task rule clean<task>
apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'no.nils.wsdl2java'
apply plugin: 'war'

version = '0.1'
group = 'swire.project'

ext {
    baseName = 'movilizer-spring-connector'
    version = '0.1'

    wsdlGeneratedFiles = "$projectDir/target/generated-sources/mcloud"
    resourcesFiles = "$buildDir/src/main/resources"
    testResourcesFiles = "$buildDir/src/test/resources"
    trimblePackageTo = 'com.trimble.tms.to'
}

/**
 * This create the possibility for someone to hoockup with the application and debug.
 */
//applicationDefaultJvmArgs = [
//	"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
//]

sourceSets.main.java.srcDirs += wsdlGeneratedFiles
sourceSets.main.java.srcDirs += resourcesFiles
//TODO adding testfiles here plz add them to the test resource path.
sourceSets.main.java.srcDirs += testResourcesFiles


jar {
    baseName = 'connector'
    version = '0.0.1-SNAPSHOT'
}

war {
    baseName = 'swire-connector'
    version = version
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    // A single directory added to a custom-named repositories grouping.
    flatDir name: 'localDiskRepo', dirs: 'lib'
}

// New configuration for CXF dependencies.
configurations {
    cxf
    providedRuntime
}

dependencies {
    //This is abig boot setup
    //compile("org.springframework.boot:spring-boot-starter-security")
    //compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-web")
    //compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-velocity")
    //compile("org.springframework.boot:spring-boot-starter-ws")
    //compile("org.springframework.boot:spring-boot-starter-remote-shell")
    //compile("org.springframework.boot:spring-boot-starter-actuator")

    //postgresql driver
    compile('org.postgresql:postgresql:9.4-1201-jdbc41')
    compile('com.h2database:h2:1.4.183')

    //for several IO and FileUtils operations this dependency is needed.

    compile('org.apache.commons:commons-io:1.3.2')
    //This is needed for the compressing of MessageQueue Items
    compile("net.jpountz.lz4:lz4:1.3.0")
    //needed to encrypt plain text password to SHA-512
    compile("org.jasypt:jasypt:1.9.0")

    testCompile("org.springframework.boot:spring-boot-starter-test")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    compile("localDiskRepo:movilizer-webservice-14.11.1.3")


}

eclipse {
    classpath {
// in the moment you will have to add the generated classes folder manually to the eclipse src directories
// http://stackoverflow.com/questions/26750869/how-to-add-gradle-generated-source-folder-to-eclipse-project
//		file.whenMerged { cp ->
//			cp.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(wsdlGeneratedFiles, null)
//		}
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

/**
 *  Custom task to generate Java classes
 *  from WSDL.
 */
wsdl2java {
    wsdlsToGenerate = [
            //http://stackoverflow.com/questions/4455195/how-to-avoid-the-need-to-specify-the-wsdl-location-in-a-cxf-or-jax-ws-generated
            //http://cxf.apache.org/docs/wsdl-to-java.html
            ["-wsdlLocation", "classpath:wsdl/MovilizerV14Wsdl11.wsdl", "src/main/resources/wsdl/MovilizerV14Wsdl11.wsdl"]
    ]
    generatedWsdlDir = file(wsdlGeneratedFiles)
    wsdlDir = file("src/main/resources/wsdl")
    cxfVersion = "2.7.15"
}

/**
 * There are some issues with spring boot if several main classes are in the Classpath
 *
 * https://github.com/jhipster/generator-jhipster/issues/460
 */
springBoot {
    mainClass = 'com.movilizer.connector.MovilizerConnectorApplication'
}


