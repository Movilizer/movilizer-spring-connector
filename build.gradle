/**
 * To run the application:
 * $ gradle bootRun
 *
 * TODO add maven profile functionality by calling a new variable to the call and evaluating
 * https://www.gradleware.com/tutorials/feature-spotlight-gradles-support-maven-pom-profiles/
 * http://www.coderanch.com/t/603665/tools/similar-Maven-profile-Gradle
 */
// Base plugin for task rule clean<task>
apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'

group = 'com.movilizer.connector'
version = '0.1'

springBoot {
    mainClass = 'MovilizerConnectorApplication'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    // A single directory added to a custom-named repositories grouping.
    flatDir name: 'localDiskRepo', dirs: 'lib'
}

/**
 * This create the possibility for someone to hoockup with the application and debug.
 */
//applicationDefaultJvmArgs = [
//	"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
//]

sourceCompatibility = 1.8
targetCompatibility = 1.8



// New configuration for CXF dependencies.
configurations {
    cxf
    providedRuntime
}

dependencies {
    //This is abig boot setup
    //compile("org.springframework.boot:spring-boot-starter-security")
    //compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-web")
    //compile("org.springframework.boot:spring-boot-starter-integration")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-velocity")
    //compile("org.springframework.boot:spring-boot-starter-ws")
    //compile("org.springframework.boot:spring-boot-starter-remote-shell")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    //postgresql driver
//    compile('org.postgresql:postgresql:9.3-1102-jdbc41')
    compile('com.h2database:h2:1.4.183')

    //for several IO and FileUtils operations this dependency is needed.
    compile('org.apache.commons:commons-io:1.3.2')
    //This is needed for the compressing of MessageQueue Items
    compile("net.jpountz.lz4:lz4:1.3.0")
    //needed to encrypt plain text password to SHA-512
    compile("org.jasypt:jasypt:1.9.0")

    //movilizer web service
//    compile("com.movilizer.mds:movilizer-webservice:12.11.1.3")
    compile("localDiskRepo:movilizer-webservice-12.11.1.3")

    compile("org.apache.httpcomponents:httpclient:4.4")
    compile("org.apache.httpcomponents:httpmime:4.4")
    compile("org.apache.httpcomponents:fluent-hc:4.4")
    compile("org.apache.cxf:cxf-core:3.1.1")
    compile("org.apache.cxf:cxf-rt-frontend-jaxws:3.1.1")
    compile("org.apache.cxf:cxf-rt-transports-http:3.1.1")

    testCompile("org.springframework.boot:spring-boot-starter-test")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

}

eclipse {
    classpath {
// in the moment you will have to add the generated classes folder manually to the eclipse src directories
// http://stackoverflow.com/questions/26750869/how-to-add-gradle-generated-source-folder-to-eclipse-project
//		file.whenMerged { cp ->
//			cp.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(wsdlGeneratedFiles, null)
//		}
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}


